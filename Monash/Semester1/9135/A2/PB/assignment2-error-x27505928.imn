node n1 {
    type router
    model static
    network-config {
	hostname R1
	!
	interface eth2
	 ip address 220.129.51.1/24
	!
	interface eth1
	 ip address 55.135.72.1/24
	!
	interface eth0
	 ip address 189.81.86.1/24
	!
    }
    canvas c1
    iconcoords {416.23136019899994 142.289073858}
    labelcoords {416.5185472769999 146.289073858}
    interface-peer {eth0 n2}
    interface-peer {eth1 n6}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	
	/sbin/ip route add default via 220.129.51.2
	/sbin/ip route add 164.220.97.0/29 via 220.129.51.2
	/sbin/ip route add 92.170.73.0/24 via 189.81.86.10
	/sbin/ip route add 164.220.97.0/24 via 220.129.51.2
	/sbin/ip route add 192.168.192.0/20 via 189.81.86.2
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	subnet 55.135.72.0 netmask 255.255.255.0 {
	  pool {
	    range 55.135.72.127 55.135.72.254;
	    default-lease-time 600;
	    option routers 55.135.72.1;
	    option domain-name "fit9135";
	    option domain-name-servers 92.170.73.100;
	  }
	}
	
	
	
	}
    }
    services {IPForward StaticRoute DHCP}
    interface-peer {eth2 n8}
}

node n2 {
    type lanswitch
    network-config {
	hostname switch2
	!
    }
    canvas c1
    iconcoords {587.666604984 142.062177826}
    labelcoords {564.319817467 120.5}
    interface-peer {e0 n1}
    interface-peer {e1 n4}
    interface-peer {e2 n21}
}

node n4 {
    type lanswitch
    network-config {
	hostname switch5
	!
    }
    canvas c1
    iconcoords {588.292847416 245.26983597100002}
    labelcoords {567.508237725 233.26983597100002}
    interface-peer {e1 n5}
    interface-peer {e2 n8}
    interface-peer {e0 n2}
}

node n5 {
    type router
    model static
    network-config {
	hostname R2
	!
	interface eth1
	 ip address 164.220.97.1/24
	!
	interface eth3
	 ip address 92.170.73.1/24
	 ipv6 address 2001:0::1/64
	!
	interface eth0
	 ip address 189.81.86.10/24
	!
	interface eth2
	 ip address 67.124.83.2/24
	!
    }
    canvas c1
    iconcoords {587.869798962 324.269145362}
    labelcoords {592.156986041 332.269145362}
    interface-peer {eth0 n4}
    interface-peer {eth1 n7}
    services {IPForward StaticRoute Firewall}
    interface-peer {eth2 n8}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add default via 67.124.83.1
	/sbin/ip route add 55.135.72.0/24 via 67.124.83.1
	/sbin/ip route add 192.168.192.0/20 via 189.81.86.2
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	# Drops all packages
	iptables -P FORWARD DROP
	
	# Enable other interface
	iptables -A FORWARD ! -o eth1 ! -i eth1 -j ACCEPT
	
	# Allow ssh (tcp port 22)
	iptables -A FORWARD -p tcp --sport 22 -j ACCEPT
	iptables -A FORWARD -p tcp --dport 22 -j ACCEPT
	
	# Allow http (tcp port 80)
	iptables -A FORWARD -p tcp --sport 80 -j ACCEPT
	iptables -A FORWARD -p tcp --dport 80 -j ACCEPT
	}
    }
    interface-peer {eth3 n24}
}

node n6 {
    type lanswitch
    network-config {
	hostname switch1
	!
    }
    canvas c1
    iconcoords {241.217277088 146.05444566199998}
    labelcoords {220.432667397 134.054445662}
    interface-peer {e0 n1}
    interface-peer {e1 n11}
    interface-peer {e3 n10}
    interface-peer {e2 n12}
    interface-peer {e4 n13}
}

node n7 {
    type lanswitch
    network-config {
	hostname switch4
	!
    }
    canvas c1
    iconcoords {589.2787643060001 462.13001598999995}
    labelcoords {568.4941546150001 450.13001598999995}
    interface-peer {e0 n5}
    interface-peer {e1 n16}
    interface-peer {e2 n17}
    interface-peer {e3 n18}
    interface-peer {e4 n19}
}

node n10 {
    type router
    model PC
    network-config {
	hostname client1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {49.212812920999994 277.085189271}
    labelcoords {21.5 261.085189271}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n11 {
    type router
    model PC
    network-config {
	hostname client2
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {53.32754963100001 211.231360199}
    labelcoords {25.61473670999999 195.231360199}
    services {DefaultRoute DHCPClient}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
}

node n12 {
    type router
    model PC
    network-config {
	hostname client3
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {54.49742261199998 103.70765814500001}
    labelcoords {26.784609691000014 87.70765814500001}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n13 {
    type router
    model PC
    network-config {
	hostname client4
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {57.77499074799999 161.906387956}
    labelcoords {30.06217782599998 145.906387956}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n24 {
    type router
    model host
    network-config {
	hostname dnsserver
	!
	interface eth0
	 ip address 92.170.73.100/24
	!
    }
    canvas c1
    iconcoords {350.891614236 424.613355492}
    labelcoords {323.178801315 408.613355492}
    custom-config {
	custom-config-id service:maradns
	custom-command maradns
	config {
	dirs=('/etc/maradns', )
	files=('/etc/maradns/mararc', '/etc/maradns/db.fit9135', '/etc/maradns/db.reverse', )
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/db.reverse
	custom-command /etc/maradns/db.reverse
	config {
	12.97.220.164.in-addr.arpa. PTR www.fit9135. ~
	
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/db.fit9135
	custom-command /etc/maradns/db.fit9135
	config {
	www.fit9135. 164.220.97.12 ~
	
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/mararc
	custom-command /etc/maradns/mararc
	config {
	ipv4_bind_addresses = "92.170.73.100/24"
	
	chroot_dir = "/etc/maradns"
	csv2 = {}
	csv2["fit9135."] = "db.fit9135"
	csv2["0.10.in-addr.arpa."] = "db.reverse"
	
	}
    }
    services {DefaultRoute SSH maradns}
    interface-peer {eth0 n5}
}

node n25 {
    type router
    model static
    network-config {
	hostname R3
	!
	interface eth1
	 ip address 10.0.0.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 163.5.5.1/24
	!
    }
    canvas c1
    iconcoords {193.86533479500002 242.41531629000002}
    labelcoords {196.152521874 245.41531629000002}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 163.5.5.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.0.1
	#/sbin/ip route add 3ffe:4::/64 via 2001:1::1
	
	/sbin/ip route add default via 10.0.0.20
	/sbin/ip route add 55.135.72.0/24 via 163.5.5.2
	/sbin/ip route add 164.220.97.0/24 via 163.5.5.2
	/sbin/ip route add 92.170.73.0/24 via 163.5.5.2
	/sbin/ip route add 192.168.192.0/20 via 163.5.5.2
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 67.124.83.10
	
	
	}
    }
    services {IPForward StaticRoute SSH}
    interface-peer {eth0 n8}
    interface-peer {eth1 n3}
}

node n16 {
    type router
    model host
    network-config {
	hostname sshserver
	!
	interface eth0
	 ip address 164.220.97.10/24
	!
    }
    canvas c1
    iconcoords {708.54413611 514.178110706}
    labelcoords {680.8313231889999 498.178110706}
    interface-peer {eth0 n7}
}

node n17 {
    type router
    model host
    network-config {
	hostname webserver3
	!
	interface eth0
	 ip address 164.220.97.11/24
	!
    }
    canvas c1
    iconcoords {615.221050646 574.431286179}
    labelcoords {610.142212321 613.366530965}
    interface-peer {eth0 n7}
}

node n18 {
    type router
    model host
    network-config {
	hostname webserver
	!
	interface eth0
	 ip address 164.220.97.12/24
	!
    }
    canvas c1
    iconcoords {403.242865921 576.34471569}
    labelcoords {393.53005299999995 612.34471569}
    services {DefaultRoute SSH HTTP}
    interface-peer {eth0 n7}
}

node n19 {
    type router
    model host
    network-config {
	hostname webserver2
	!
	interface eth0
	 ip address 164.220.97.13/24
	!
    }
    canvas c1
    iconcoords {499.41531628999996 605.615242271}
    labelcoords {492.70250336899994 645.615242271}
    interface-peer {eth0 n7}
}

node n8 {
    type router
    model static
    network-config {
	hostname R4
	!
	interface eth3
	 ip address 163.5.5.2/24
	!
	interface eth2
	 ip address 67.124.83.1/24
	!
	interface eth1
	 ip address 189.81.86.4/24
	!
	interface eth0
	 ip address 220.129.51.2/24
	!
    }
    canvas c1
    iconcoords {416.32428163400004 244.51150572199998}
    labelcoords {414.611468713 248.51150572199998}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
    interface-peer {eth2 n5}
    interface-peer {eth3 n25}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add default via 163.5.5.1
	/sbin/ip route add 164.220.97.0/24 via 189.81.86.10
	/sbin/ip route add 55.135.72.0/24 via 220.129.51.1
	/sbin/ip route add 92.170.73.0/24 via 189.81.86.10
	/sbin/ip route add 192.168.192.0/20 via 189.81.86.2
	
	}
    }
    services {IPForward StaticRoute}
}

node n3 {
    type router
    model PC
    network-config {
	hostname Outer
	!
	interface eth0
	 ip address 10.0.0.20/24
	 ipv6 address 2001:1::20/64
	!
    }
    canvas c1
    iconcoords {193.0 349.0}
    labelcoords {193.0 381.0}
    interface-peer {eth0 n25}
}

node n9 {
    type router
    model PC
    network-config {
	hostname c1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {946.0 172.0}
    labelcoords {946.0 204.0}
    interface-peer {eth0 n22}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n14 {
    type router
    model PC
    network-config {
	hostname c2
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {944.0 273.0}
    labelcoords {944.0 305.0}
    interface-peer {eth0 n22}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n15 {
    type router
    model PC
    network-config {
	hostname c3
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {948.0 374.0}
    labelcoords {948.0 406.0}
    interface-peer {eth0 n22}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n20 {
    type router
    model PC
    network-config {
	hostname c4
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {945.0 465.0}
    labelcoords {945.0 497.0}
    interface-peer {eth0 n22}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n21 {
    type router
    model static
    network-config {
	hostname R5
	!
	interface eth1
	 ip address 192.168.192.1/20
	!
	interface eth0
	 ip address 189.81.86.2/24
	!
    }
    canvas c1
    iconcoords {760.0 144.0}
    labelcoords {760.0 176.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n22}
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	subnet 192.168.192.0 netmask 255.255.240.0 {
	  pool {
	    range 192.168.192.2 192.168.192.10;
	    default-lease-time 600;
	    option routers 192.168.192.1;
	    option domain-name "fit9135";
	    option domain-name-servers 92.170.73.100;
	  }
	}
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add default via 189.81.86.1
	/sbin/ip route add 55.135.72.0/24 via 189.81.86.1
	/sbin/ip route add 92.170.73.0/24 via 189.81.86.10
	/sbin/ip route add 164.220.97.0/24 via 189.81.86.10
	}
    }
    services {IPForward StaticRoute DHCP}
}

node n22 {
    type lanswitch
    network-config {
	hostname switch3
	!
    }
    canvas c1
    iconcoords {759.0 322.0}
    labelcoords {759.0 346.0}
    interface-peer {e0 n21}
    interface-peer {e1 n9}
    interface-peer {e2 n14}
    interface-peer {e3 n15}
    interface-peer {e4 n20}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l4 {
    nodes {n5 n4}
    bandwidth 0
}

link l5 {
    nodes {n6 n1}
    bandwidth 0
}

link l6 {
    nodes {n7 n5}
    bandwidth 0
}

link l7 {
    nodes {n11 n6}
    bandwidth 0
}

link l9 {
    nodes {n10 n6}
    bandwidth 0
}

link l8 {
    nodes {n12 n6}
    bandwidth 0
}

link l10 {
    nodes {n13 n6}
    bandwidth 0
}

link l11 {
    nodes {n16 n7}
    bandwidth 0
}

link l12 {
    nodes {n17 n7}
    bandwidth 0
}

link l13 {
    nodes {n18 n7}
    bandwidth 0
}

link l14 {
    nodes {n19 n7}
    bandwidth 0
}

link l15 {
    nodes {n1 n8}
    bandwidth 0
}

link l16 {
    nodes {n8 n4}
    bandwidth 0
}

link l17 {
    nodes {n8 n5}
    bandwidth 0
}

link l18 {
    nodes {n25 n8}
    bandwidth 0
}

link l19 {
    nodes {n24 n5}
    bandwidth 0
}

link l2 {
    nodes {n2 n4}
    bandwidth 0
}

link l3 {
    nodes {n25 n3}
    bandwidth 0
}

link l20 {
    nodes {n2 n21}
    bandwidth 0
}

link l21 {
    nodes {n21 n22}
    bandwidth 0
}

link l22 {
    nodes {n9 n22}
    bandwidth 0
}

link l23 {
    nodes {n14 n22}
    bandwidth 0
}

link l24 {
    nodes {n15 n22}
    bandwidth 0
}

link l25 {
    nodes {n20 n22}
    bandwidth 0
}

annotation a1 {
    iconcoords {796.0 21.0}
    type text
    label {Student ID: 27505928}
    labelcolor black
    fontfamily {Arial}
    fontsize {14}
    effects {bold}
    canvas c1
}

canvas c1 {
    name {Assignment2}
    size {1000 834.34471569}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    controlnet=
    enablerj45=0
    enablesdt=0
    preservedir=0
}

